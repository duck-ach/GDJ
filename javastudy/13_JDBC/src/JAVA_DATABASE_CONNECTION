JDBC

1. JAVA DATABASE CONNECTION
2. 사용할 클래스
	1) OracleDriver : 오라클(DB벤더)에서 제공 - ojdbc6.jar
	   C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib
	   클래스 - oracle.jdbc.OracleDriver
	   프로젝트의 Build Path - class path에 ojdbc6.jar 라이브러리를 등록해야 함
	   
	   - 이후 클래스는 모두 자바에서 제공
	   - 공통 패키지 : java.sql 패키지
	   
	2) DriverManager : DB접속(커넥션) 생성
	   (1) url : DB주소(로컬에 설치한 DB - localhost 또는 127.0.0.1)
	   (2) user : 사용자(스키마)
	   (3) password : 비밀번호
	3) Connection : DB접속
	4) PreparedStatement : 쿼리문 실행
	5) ResultSet : SELECT문 실행 결과를 처리
	

SQL Injection
1. 특정 쿼리문을 삽입하여 원하는 정보를 탈취하는 방법
2. 로그인 상황
	1) SELECT * FROM 회원 WHERE 아이디=변수1 AND 비밀번호=변수2
	2) "SELECT * FROM 회원 WHERE 아이디 = '" + 변수1 + " AND 비밀번호 ='" + 변수2 + "'"
	
	3) 변수
		(1) id : min
		(2) pw : ' OR 1=1 --
	4) 쿼리에 변수값 대입
		SELECT * FROM 회원 WHERE 아이디='min' AND 비밀번호='' OR 1=1 --'
		
-- SQL Injection을 방지하려면 PreparedStatement를 사용하면 된다!
PreparedStatement의 로그인 상황
	1) "SELECT * FROM 회원 WHERE 아이디=? AND 비밀번호=?"
	2) 변수
		(1) id = min
		(2) pw = ' OR 1=1 --
	3) SELECT * FROM 회원 WHERE  아이디='min' AND 비밀번호='' OR 1=1 --'
	
	
- INSERT, UPDATE, DELETE
- 1. JDBC 코드가 동일하다. (실행이 executeUpdate() 메소드)
- 2. Auto Commit이기 때문에 Commit을 해주지 않아도 된다. 

- SELECT
	1. 실행은 executeQuery() 메소드를 이용
	2. 실행 결과는 ResultSet 객체이다.
	3. ResultSet 객체는 테이블을 행(ROW) 단위로 스캔하고 가져올 수 있는 객체
	4. next() 메소드를 이용해서 행(Row) 단위로 스캔한다. ( next() 1개 -> 행(ROW) 1개 )
	5. while문을 통해서 next()를 실행한다. (행이 1개일 경우 if를 사용하기도 한다.)
	


- DTO와 DAO
	1. DTO : Data Transfer Object, 데이터 전송 객체, DB로 전송할 데이터는 하나로 모아서 처리,
	클래스를 이용해 객체로 만들어서 전달하는 형태
	Board -> BoardDTO
	
	2. DAO : Database Access Object, 데이터베이스 접근 객체, 쿼리문을 실행하는 모든 메소드를 처리하는 클래스,
	Singleton 패턴으로 하나의 객체만 존재할 수 있도록 처리
	
하나로 모아서 처리할 때 Map
